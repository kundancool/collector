#!/bin/bash

# Deploy script for Kafka Collector
# Downloads binary, sets up config, and installs as service

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Configuration
VERSION="v0.1.11"
BINARY_URL="https://github.com/kundancool/collector/releases/download/${VERSION}/collector-x86_64-linux"
INSTALL_DIR="/usr/local/bin"
CONFIG_DIR="/etc/collector"
SERVICE_NAME="collector"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    log_error "This script must be run as root (use sudo)"
    exit 1
fi

# Detect OS
if [[ -f /etc/alpine-release ]]; then
    OS="alpine"
    SERVICE_TYPE="openrc"
    BINARY_NAME="collector-x86_64-linux-musl"
elif [[ -f /etc/debian_version ]] || [[ -f /etc/ubuntu_version ]]; then
    OS="ubuntu"
    SERVICE_TYPE="systemd"
    BINARY_NAME="collector-x86_64-linux-gnu"
else
    log_error "Unsupported OS. This script supports Alpine Linux and Ubuntu."
    exit 1
fi

log_info "Detected OS: $OS ($SERVICE_TYPE)"

# Check for required tools
command -v curl >/dev/null 2>&1 || { log_error "curl is required but not installed."; exit 1; }

# Create config directory
log_info "Creating config directory: $CONFIG_DIR"
mkdir -p "$CONFIG_DIR"

# Download binary
BINARY_URL="https://github.com/kundancool/collector/releases/download/${VERSION}/${BINARY_NAME}"
log_info "Downloading binary from $BINARY_URL"
if ! curl -L -o "$INSTALL_DIR/collector" "$BINARY_URL"; then
    log_error "Failed to download binary"
    exit 1
fi

# Make binary executable
chmod +x "$INSTALL_DIR/collector"
log_info "Binary installed to $INSTALL_DIR/collector"

# Generate .env file
log_info "Generating .env file"
cat > "$CONFIG_DIR/.env" << 'EOF'
# Environment Configuration for Kafka Collector
# Generated by deploy script

# Application Configuration
BINARY_NAME=collector

# Kafka Configuration
KAFKA_BOOTSTRAP_SERVERS=localhost:9092
KAFKA_MESSAGE_TIMEOUT_MS=5000
KAFKA_DELIVERY_TIMEOUT_MS=5000
KAFKA_REQUEST_TIMEOUT_MS=5000
KAFKA_SOCKET_TIMEOUT_MS=5000

# HTTP Server Configuration
HOST=0.0.0.0
PORT=8080
PUBLIC_ACCESS=true
RUST_LOG=info

# Service Configuration
SERVICE_USER=nobody
SERVICE_GROUP=nogroup
EOF

# Generate config.yaml
log_info "Generating config.yaml"
cat > "$CONFIG_DIR/config.yaml" << 'EOF'
# Kafka Collector Configuration
# Generated by deploy script
# Add your endpoints here

endpoints:
  - path: "/api/events"
    kafka_topic: "events"
    kafka_partition: 0
EOF

# Create service file
if [[ "$SERVICE_TYPE" == "systemd" ]]; then
    log_info "Installing systemd service"
    cp "$SCRIPT_DIR/../systemd/collector.service" "/etc/systemd/system/${SERVICE_NAME}.service"
    systemctl daemon-reload
    systemctl enable "$SERVICE_NAME"
    log_info "Service enabled. Use 'systemctl start collector' to start"

elif [[ "$SERVICE_TYPE" == "openrc" ]]; then
    log_info "Installing OpenRC service"
    cp "$SCRIPT_DIR/../openrc/collector" "/etc/init.d/${SERVICE_NAME}"
    rc-update add "$SERVICE_NAME" default
    log_info "Service added. Use 'rc-service collector start' to start"
fi

log_info "Deployment complete!"
log_info "Edit $CONFIG_DIR/config.yaml to add your endpoints"
log_info "Edit $CONFIG_DIR/.env to configure Kafka and server settings"

# Start the service
log_info "Starting the service..."
if [[ "$SERVICE_TYPE" == "systemd" ]]; then
    systemctl start "$SERVICE_NAME"
    systemctl status "$SERVICE_NAME"
elif [[ "$SERVICE_TYPE" == "openrc" ]]; then
    rc-service "$SERVICE_NAME" start
    rc-service "$SERVICE_NAME" status
fi