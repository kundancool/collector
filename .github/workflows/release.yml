name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Release ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: x86_64-linux-gnu
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   name: x86_64-linux-musl
          # - os: macos-13
          #   target: x86_64-apple-darwin
          #   name: x86_64-macos
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   name: arm64-macos
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   name: x86_64-windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        shell: bash
        run: |
          if [ -n "$GITHUB_REF_NAME" ]; then
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          else
            VERSION=$(grep '^version =' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
            echo "version=$VERSION" >> $GITHUB_ENV
          fi

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y curl dpkg-dev cmake build-essential

      - name: Install cmake (macOS)
        if: startsWith(matrix.os, 'macos')
        run: brew install cmake

      - name: Install Chocolatey (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force;
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install cmake (Windows)
        if: runner.os == 'Windows'
        run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get install -y musl-tools clang
          echo "CC=musl-gcc" >> $GITHUB_ENV
          echo "CXX=musl-g++" >> $GITHUB_ENV

      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          MACOSX_DEPLOYMENT_TARGET: 11.0

      - name: Strip and rename binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          strip target/${{ matrix.target }}/release/collector
          mv target/${{ matrix.target }}/release/collector collector-${{ matrix.name }}
          chmod +x collector-${{ matrix.name }}

      - name: Strip and rename binary (macOS x86_64)
        if: matrix.os == 'macos-13'
        run: |
          strip target/${{ matrix.target }}/release/collector
          mv target/${{ matrix.target }}/release/collector collector-${{ matrix.name }}
          chmod +x collector-${{ matrix.name }}

      - name: Strip and rename binary (macOS ARM64)
        if: matrix.os == 'macos-latest' && matrix.target == 'aarch64-apple-darwin'
        run: |
          strip target/${{ matrix.target }}/release/collector
          mv target/${{ matrix.target }}/release/collector collector-${{ matrix.name }}
          chmod +x collector-${{ matrix.name }}

      - name: Rename binary (Windows)
        if: matrix.os == 'windows-latest'
        run: mv target/${{ matrix.target }}/release/collector.exe collector-${{ matrix.name }}.exe

      - name: Build .deb package (Linux GNU)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          mkdir -p package/DEBIAN package/usr/bin package/etc/collector package/etc/systemd/system
          cp collector-${{ matrix.name }} package/usr/bin/collector
          cp conf.example.yaml package/etc/collector/config.yaml
          cp .env.example package/etc/collector/.env
          cp scripts/systemd/collector.service package/etc/systemd/system/
          printf 'Package: collector\nVersion: ${{ env.version }}\nArchitecture: amd64\nMaintainer: Your Name <your.email@example.com>\nDescription: Kafka Collector - HTTP to Kafka Bridge\nDepends: systemd\n' > package/DEBIAN/control
          printf '#!/bin/bash\nsystemctl daemon-reload\nsystemctl enable collector\n' > package/DEBIAN/postinst
          chmod +x package/DEBIAN/postinst
          dpkg-deb --build package collector_${{ env.version }}_amd64.deb

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            collector-${{ matrix.name }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            ${{ matrix.target == 'x86_64-unknown-linux-gnu' && format('collector_{0}_amd64.deb', env.version) || '' }}

  create-release:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}